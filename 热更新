1. 使用NPM全局安装插件客户端。
    
    npm install -g cordova-hot-code-push-cli
    ```
2. 配置根目录下的`cordova-hcp.json`文件。
    ```
    {
        "autogenerated": true,
        "update": "start", // 更新方法，可选值为 now | resume | start
        "content_url": "http://.*", // 远程服务器
        "release": "2017.05.31-18.15.01"
    }
    ```
3. 配置根目录下的`.chcpenv`文件。
    ```
    {
        "content_url": "http://.*", // 远程服务器地址
        "config_url": "http://.*chcp.json" // 远程服务器配置文件地址
    }
    ```
4. 配置根目录下的`config.xml`文件。
    ```
    <chcp>
        <!-- 远程服务器配置文件地址 -->
        <config-file url="http://.*chcp.json"/>
        <native-interface version="0" />
    </chcp>
    ```
5. 在`www`目录生成配置文件。
    ```
    cordova-hcp build
    ```

- 每次编译完，都是用`cordova-hcp build`生成配置文件，然后将www目录下所有文件拷贝到远程服务器。

## 正式发包的打包流程

1. 删除掉 `www` 目录下的所有文件。

2. 使用 `cordova-hcp build` 命令生成配置文件。

3. 使用 `ionic build android --prod` 编译APK。

4. 将 `www` 目录里面所有的文件复制到 `服务器上的热更新目录` 。

5. 将 `platform/android/build/outputs/apk` 目录下的apk文件复制到 `服务器上的APK目录` 。记得修改文件名为 `mmearn.apk`

6. 现在发包就完成了，如果你现在需要使用热更新来推送新的更新。你只需要在进行一次 `ionic build android --prod` 之后，使用 `cordova-hcp build` 生成配置文件。然后将 `www` 目录下所有文件覆盖到 `服务器上的热更新目录`。
